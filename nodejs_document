1. global var process:
    if you want to get data from console, process.argv[2] is the first argument that you type
    process.argv[0] and [1] is some data about your nodejs folder

2. Run function immediately
    (function(){

    })();

3. Create a module and call it:
    make a file: myModule.js 
    module.exports = function(argv1,argv2,callback){
        if(err) return callback(err); // if you call some function have err
        else callback(data);
    }
    in main file:
        var myModule = require('./myModule.js);

4. HTTP Get Client
    http.get(argv,function(response))
    response is Node Stream Object, have 3 events: "data","err","end", handle event like this:
        respone.on("data",function(data){
        });

    note: response.on('data') return the first data you get until end event call
5. let, var:
    let: variable local, just in that function
6. Create TCP server:
    net = require('net');
    server = net.createServer(function(socket){
        //socket handling login
    })
    server.listen(port);
    socket.write(data);
    socket.end();

7. Create HTTP server
    server = http.createServer(function(req,res){
        //req: is used to fetch properties: header, query-string
        //res: sending data to the client: headers and body
        //request and response are also Node streams
        //use src.pipe(dst) to pipe the data from the src stream to the dst stream
        ex: fs.createReadStream(process.argv[3]).pipe(res)
    })

    You can use url module to get url Json: url.parse(req.url,true)

    Send data to client: res.end(data);
    for web client: res.writeHead(200, { 'Content-Type': 'application/json' });

    Scope, scope chains, closure

1. Scope:
    function someFunc() {
      var outerVar = 1;
      function inner() {
        var innerVar = 2;
      }
    }

inner has access to both innerVar & outerVar, but someFunc onlyhas
access to outerVar

2. If you forget var or let, that variable will have global scope (window/global object)
3. Shadowing: 
    function someFunc() {
       var foo = 1;
       function inner() {
          var foo = 2;
       }
    }

    Normally, inner function can use variable in outer function(somFunc()), but in that case,
    there is noway to access var foo of somFunc(). That's call shadowing


    Stream-Adventure
1. `split` will buffer chunks on newlines before you get them. With example
2. `concat-stream` is a write stream that you can pass a callback to get the
complete contents of a stream as a single buffer.
3. pipe(): send stream data to dest
4. 'request': 
Here's an example of how to use the `request` module to send a GET request,
piping the result to stdout:

    var request = require('request');
    request('http://beep.boop:80/').pipe(process.stdout);

To make a POST request, just call `request.post()` instead of `request()`:

    var request = require('request');
    var r = request.post('http://beep.boop:80/');

The `r` object that you get back from `request.post()` is a readable+writable
stream so you can pipe a readable stream into it (`src.pipe(r)`) and you can
pipe it to a writable stream (`r.pipe(dst)`).

5. With `trumpet` you can create a transform stream from a css selector:

    var trumpet = require('trumpet');
    var fs = require('fs');
    var tr = trumpet();
    fs.createReadStream('input.html').pipe(tr);

    var stream = tr.select('.beep').createStream();

Now `stream` outputs all the inner html content at `'.beep'` and the data you
write to `stream` will appear as the new inner html content.

    Elementary Electron
When you get Error: EACCES: permission denied, use this command:
sudo npm install electron --unsafe-perm=true



    How-to-mark-down
Markdown - is a lightweight, easy-to-read, easy-to-write plain text format
for styling all forms of writing around the Internet. Markdown helps to
control the display of the document: formatting words as bold or italic,
adding images, creating lists and so on.

how-to-markdown run file.md will serve a local server at
     http://localhost:3000/ with a preview of file.md.

1. Heading: 
The number of # is a heading level. For example:
     # Heading 1
     ## Heading 2
2. Paragraphs are separated by a blank line, so if you need to create two or
 more paragraphs, you have to write something like this:

    I am the first paragraph.

    I am the second one.
3.  Italics with *text* or _text_
    Bold with **text** or __text__
    combine with ** and _ **_text_**
    strikethrough wrap the text in two tildes (~) like so:
         ~~Scratch this line.~~
4.  Insert an asterisk (*) or a dash
    (-) before each item for an unordered list or a number with a dot for an
    ordered one (e.g., 1., 2., 3.).
    Add a tab, or spaces for nested elements such as: 
    - element 1
       - element 1.1
       - element 1.2
     
5.  Links in Markdown have this format:

     [text](href "alt"): [Google Homepage](https://www.google.com "Google Homepage")

    Reference style: 
        [NodeSchool Site][ref]
        [GitHub][1]
        [Remark parser]

    Some text to show that the reference links can follow later:
        [ref]: http://www.nodeschool.io
        [1]: https://github.com/
        [Remark parser]: http://remark.js.org/

6. Make text in a code form:
    ```js
    const add = (a, b) => a + b;
7. Use | to make table


    Learn you html
1. 
   » <sup> - upper index
   » <sub> - lower index
2. In some cases you need to implement glossary or to display a list of
  key-value pairs. There is <dl> tag for such needs. <dl> stands for
  definitions list and is used to encloses a list of groups of terms and
  descriptions.

  Terms are enclosed in <dt> tag, which means definition term. Definitions
  are wrapped in <dd> tags.
3.  A <form> element has a lot of attributes, here are the most important of
  them:

   » action - the URI of a program that processes the form information.
   » method - the HTTP method that the browser uses to submit the form.
     Possible values are: post — corresponds to the HTTP POST method;get -
     corresponds to the HTTP GET method.
   » name - The name of the form. It must be unique among the forms in a
     document.

  Here is a more information about <form>'s attributes:
  (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#Attributes
  )

  <input> — the element is used to create interactive controls for web-based forms in
  order to accept data from the user. How an <input> works varies
  considerably depending on the value of its type attribute.



    Functional Javascript
1. Create a module 
    module.exports = function(input) {
      return input.toUpperCase()
    }
2. Map in js:
    var array1 = [1, 4, 9, 16];
    var map1 = array1.map(function double(x){
    return x*2 ;
});

var new_array = arr.map(function callback(currentValue[, index[, array]]) {
    // Return element for new_array
    }[, thisArg])
        Parameters
    callback
    Function that produces an element of the new Array, taking three arguments:
 
    currentValue
    The current element being processed in the array.
    indexOptional
    The index of the current element being processed in the array.
    arrayOptional
    The array map was called upon.
    thisArgOptional
    Value to use as this when executing callback.

3. Filter in js
//this function return any item in this array that meet the condition of this function
var array=[1,2,3,4];
array2 = array.filter(function(item){
    return item < 3 ;
}) 

array2 = [1,2] 